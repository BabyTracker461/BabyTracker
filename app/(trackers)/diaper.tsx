import {
    Text,
    View,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    Keyboard,
    Alert,
} from 'react-native'
import { useState } from 'react'
import { useSafeAreaInsets } from 'react-native-safe-area-context'
import supabase from '@/library/supabase-client'
import { router } from 'expo-router'
import { getActiveChildId } from '@/library/utils'
import DiaperModule from '@/components/diaper-module'
import { diaper_amount, diaper_consistency, DiaperLog } from '@/types/diaper'
import { localDb } from '@/library/sqlite'

export default function Diaper() {
    const db = localDb()
    const insets = useSafeAreaInsets()
    const [isTyping, setIsTyping] = useState(false)
    const [consistency, setConsistency] = useState<diaper_consistency>('Wet')
    const [amount, setAmount] = useState<diaper_amount>('SM')
    const [timestamp, setChangeTime] = useState(new Date())
    const [note, setNote] = useState('')
    const createDiaperLog = async (
        diaper_log: DiaperLog,
        child_id: string,
    ): Promise<{
        success: boolean
        error?: any
        data?: any
        localId?: number
    }> => {
        let localId: number | undefined = undefined
        const change_time_iso = diaper_log.timestamp.toISOString()

        // 1. Add to local DB first (optimistic update)
        try {
            const sql = `
                INSERT INTO local_diaper_logs
                    (child_id, consistency, amount, change_time, note, supabase_id, logged_at)
                VALUES (?, ?, ?, ?, ?, NULL, NULL);
            `
            // Ensure note is null if undefined/empty for DB consistency
            const noteValue =
                diaper_log.note && diaper_log.note.trim() !== ''
                    ? diaper_log.note.trim()
                    : null

            const result = await db.runAsync(sql, [
                child_id,
                diaper_log.consistency,
                diaper_log.amount,
                change_time_iso,
                noteValue,
            ])

            // Check if lastInsertRowId exists and is valid
            if (
                typeof result.lastInsertRowId !== 'number' ||
                result.lastInsertRowId <= 0
            ) {
                throw new Error(
                    'Failed to get last insert row ID from local DB.',
                )
            }
            localId = result.lastInsertRowId
            console.log(`Diaper log inserted locally with local_id: ${localId}`)
        } catch (localError) {
            console.error(
                'Error inserting diaper log into local DB:',
                localError,
            )
            // Failed even before trying Supabase. Return failure.
            return { success: false, error: localError }
        }

        // 2. Attempt to add to Supabase
        try {
            const { data: supabaseData, error: supabaseError } = await supabase
                .from('diaper_logs')
                .insert([
                    {
                        child_id,
                        consistency: diaper_log.consistency,
                        amount: diaper_log.amount,
                        change_time: change_time_iso, // Use the same ISO string
                        note: diaper_log.note,
                        // logged_at is set by Supabase DEFAULT
                        // id (UUID) is generated by Supabase
                    },
                ])
                .select() // Crucial: Returns the inserted row(s) including generated id and logged_at
                .single() // We expect only one row back

            if (supabaseError) {
                console.error(
                    'Error creating diaper log in Supabase:',
                    supabaseError,
                )
                // Log created locally but failed in Supabase.
                // The overall operation is considered failed for now.
                // The unsynced local record will be handled by the sync function later.
                return { success: false, error: supabaseError, localId }
            }

            if (!supabaseData || !supabaseData.id || !supabaseData.logged_at) {
                // This shouldn't happen on success, but good to check
                console.warn(
                    "Supabase insert seemed successful but didn't return expected data (id/logged_at).",
                )
                // Treat as partial success - log exists locally, might exist remotely but we can't confirm/update locally.
                // Sync function should eventually reconcile this.
                return {
                    success: true,
                    data: supabaseData,
                    localId,
                    error: new Error(
                        "Supabase didn't return expected ID/timestamp.",
                    ),
                }
            }

            console.log(
                'Diaper log successfully added to Supabase:',
                supabaseData.id,
            )

            // 3. Update local record with Supabase ID and logged_at
            const supabase_id = supabaseData.id
            const logged_at_iso = supabaseData.logged_at

            try {
                const updateSql = `
                    UPDATE local_diaper_logs
                    SET supabase_id = ?, logged_at = ?
                    WHERE local_id = ?;
                `
                await db.runAsync(updateSql, [
                    supabase_id,
                    logged_at_iso,
                    localId,
                ])
                console.log(
                    `Local record ${localId} updated with Supabase ID: ${supabase_id}`,
                )
                // Definite success!
                return { success: true, data: supabaseData, localId }
            } catch (updateError) {
                console.error(
                    `Failed to update local record ${localId} after Supabase success:`,
                    updateError,
                )
                // Log succeeded in Supabase, but local update failed. Critical inconsistency state.
                // The sync function *must* be robust enough to handle this.
                // Return success (as data is in Supabase) but include the error.
                return {
                    success: true,
                    data: supabaseData,
                    localId,
                    error: new Error(
                        `Local DB update failed for ${localId} after Supabase success.`,
                    ),
                }
            }
        } catch (supabaseError) {
            // Catch any unexpected errors during the Supabase operation itself
            console.error(
                'Unhandled error during Supabase operation:',
                supabaseError,
            )
            return { success: false, error: supabaseError, localId }
        }
    }

    const saveDiaperLog = async () => {
        const { success, childId, error } = await getActiveChildId()

        if (!success) {
            Alert.alert(`Error: ${error}`)
            return { success: false, error }
        }

        const entry: DiaperLog = {
            amount,
            consistency,
            timestamp,
            note,
        }

        return await createDiaperLog(entry, childId)
    }

    const handleSaveDiaperLog = async () => {
        if (consistency && amount) {
            const result = await saveDiaperLog()
            if (result.success) {
                router.replace('/(tabs)')
                Alert.alert('Diaper log saved successfully!')
            } else {
                Alert.alert(`Failed to save diaper log: ${result.error}`)
            }
        } else {
            Alert.alert('Please provide consistency and amount')
        }
    }

    return (
        <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
            <View
                className='main-container justify-between'
                style={{ paddingBottom: insets.bottom }}
            >
                <View
                    className={`gap-6 transition-all duration-300 ${
                        isTyping ? '-translate-y-[40%]' : 'translate-y-0'
                    }`}
                >
                    <DiaperModule
                        onConsistencyUpdate={setConsistency}
                        onAmountUpdate={setAmount}
                        onTimeUpdate={setChangeTime}
                    />
                    <View className='bottom-5'>
                        <View className='items-start top-5 left-3 z-10'>
                            <Text className='bg-gray-200 p-3 rounded-xl font'>
                                Add a note
                            </Text>
                        </View>
                        <View className='p-4 pt-9 bg-white rounded-xl z-0'>
                            <TextInput
                                className=''
                                placeholderTextColor={'#aaa'}
                                placeholder='i.e. really messy'
                                multiline={true}
                                maxLength={200}
                                onFocus={() => setIsTyping(true)}
                                onBlur={() => setIsTyping(false)}
                                value={note}
                                onChangeText={setNote}
                            />
                        </View>
                    </View>
                </View>
                <View className='flex-row gap-2'>
                    <TouchableOpacity
                        className='rounded-full p-4 bg-red-100 grow'
                        onPress={handleSaveDiaperLog}
                    >
                        <Text>➕ Add to log</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        className='rounded-full p-4 bg-red-100 items-center'
                        onPress={() => router.replace('./')}
                    >
                        <Text>🗑️ Reset fields</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </TouchableWithoutFeedback>
    )
}
